javadoc
    it is a tool in JDK
    follows same way as the java and javac commands

while compiling java the file name can be case insenstive as windows is not case sensitive    

app class (client class) and solution/server class.


String 
   A collections of characters
   "abc"
   "123"  -- String it is not a number (int, long, )


For two objects or primitive types to be equal they have to satisfy
two conditions
   1. they have to be of the same data type
   2. content of the variable has to be equal.


Primitive types and Objects
    they just have data
    Objects have data and methods

    String "Madhavi"
      M a d h a v i
      0 1 2 3 4 5 6 
      10????
      --- First character what is?    ---       M
      --- how many characters in the String?    7
      --- how to add another String to this?    "Madhavi Vinjamuri"
      --- How to split it into multiple strings? "Ma"  "dhavi"   "mad" 'havi"'

  Exception class   

  04/17/2020
     Inheritance
        Pattern Classes
     Exception
     String    



     Code ---- > new code
     Java everything is a class

     Class ----> Class

     Parent Class ----> Child Class
     Super Class ----> Sub Class


     Mother1  Father   Mother2
         |     |       |
          --------------
            |       | 
          Child   Child2

   Java has only single inheritance

      parent ----------  Child          
                |
                 ------- Child


      StarPattern    ------------- StarNumberPattern   ---------   Patterns
   prints star pattern          prints Number Pattern            Number pyramid & star Pyramid

   ///   protected 
     Access Qualifiers class/variable/method
       public    --- every body
       private   --- nobody except inside the class
       protected --- only children and their children
       <<default>>  --- only package 

   /// getters and setters

   /// this keyword

   /// super keyword

   /// return keyword

   /// Method overload 


   public void printStarPyramid(int noOfLines){
   public void printStarPyramid(){
   public int printStarPyramid(){
   public void printStarPyramid(int noOfLines, int secondNoOfLines)

   /// anatomy of the method  ---  signature
   <<access_qualifier>> <<return_type>> methodName(<<parameter1>>, <<parameter2>>, ....)


   a class becomes abstract when if a method or varible inside it is defined as abstract.


   Super Class --------->    sub class
     Animal    --------->     Dog 


   Method Overriding
     When sub class rewrites a method/variable in Super class.     


     Parent ------ subclass1 -----   subclass2

     Parent ------------> Subclass1
           |
            ------------> Subclass2

 //// abstract key word
         abstract classes cannot be created.

 /// anatomy of object creation
       Dog aDog = new Dog();
    <<class_name>>  <<<Reference variable name>>> = new <<classname>>(); 
    
    Computer memory  --- 8GB
    -------------
    | 4 GB       |
    |------------|
    |1GB |       |
     ------------

        1GB
     --------------
     | Dog    aDog |
     |------       |     1Gb = 1000KB
     | n,t  |      |      850MB --- noflegs
     | meth |      |      851MB ---- hasTail
     |-------  --- |      852 --- says()
     |        |950||
     |         --- |     750
     --------------      anAnimal = 

     aDog contain a "reference" to the Dog object 

     /// any super class reference can point to its subclass


  ////   Polymorphism 


  //// Exception class


  /// anatomy of the method --- second revise
   <<access_qualifier>> <<return_type>> methodName(<<parameter1>>, <<parameter2>>, ....) throws <<exceptions given>>

 /// scope ---
      the visibility (whether I can use the variable or not) is within the blocks
      blocks are anything that is inside a open curly brace and a closed curly brace
      {


      }

  /// use both the exceptions classse
  /// use my code to get the second class

  java -cp bin com.apps.MonthFinderApp
  January
  This is not a valid month number
  This is not even a number

                             SuperPatterns  --- Parent class
                                  |
   trianglePattern(int noOfLines)                      pyramidPattern(int noOfLines)
   trianglePattern(String design, int noOfLines)       pyramidPattern(String design, int noOfLines)   
                                  |
                                  |
        ------------------------------------------
        |                                        |
    NumberPattern                           StringPattern
      printTriangle(String)                printTriangle(String, int)
      printPyramid(String)                 printPyramid(String, int)
     throws NotEvenANumber                   NotAStringPattern

 
   int length;                                               something
   String design = "*";
   length = design.length();

   design = "$";
   length = design.length();
   design = "someString";
   length = design.length();


date ::::::::april 22nd and 23rd

 Animal                                          Vehicles
       |                                                 |
       |--------     Dog             Bus  ---------------|
       |                                                 |
       |--------     Cat             Bike ---------------|  --- isPatable()
       | 
       |--------     Cow    --- no
       |
       |--------     Human  --- no

       Pet object 
         isPetable();

    Interface --- Pet 

===    Inheritance
       Polymorphism
       Method overloading
       Method overriding
       Abstraction
           class object ---   methods/attributes
       Encapsulation
           class objects 

   In Java everything is Object


   Object class    by default will extend it.
     |
     |
     |
   Animal       public class Animal extends Object{
                   protected int noOfLges;
                   protected int hasTail;
                   public void says(){

                   }
                 }
                 public class Dog extends Animal{

                 }
Object
     equals(anotherObject)                 

     public boolean equals(anotherObject)

Vehicle class  --- color
   |      |        --------  classess  templates --- cookie cutter
 Bus     Bike

///    objects  --- coookies                 WhiteBus.equals(WhiteBike)
           WhiteBus
           BlackBus                      overirde equals  ---   if it is a bus and color is same then only return true

           WhiteBike
           BlackBike

    Vehicle busVehcileWhite = new Bus();
    Vehicle busVehcileBlack = new Bus()

Object is a special type of class. Its speciality is, it is mother of all Obejcts    

String   set of character strings

    "skjfksdhfsdhhs"

    other objects if we want to create?
   <<object_name>> variablechosen = new <<obejct_name>>();

      String someRandomString = "asjdashdasa";   ---- first way of creating String

      String anotherString = new String("asjdashdasa");  --- second way of creating string
      public void printPattern(String design, int noOfLines)

      <<obejct-name>> <<variable-name>> =  new <<Obeject-name>>();

      same name as the class name....
      every class will have a method whose name is same as the class name

      PrintPattern
         ---   public void printNumber(int noOfLines)
               public void printNumber(String design, int noOfLines)
               public void printStar(int noOflInes)
               public void printStar(String design, int noOfLines)
               public PrintPattern()
               ---  public ,,,  PrintPattern(int noOflines)

this mthod is called "Constructor"   --- this method will create the object. thats why you are using with new key word while creating a object.

  I can overload the constructor method

Exercise for tomorrow
    instead of passing nof oflines you want to print
    create a object with default noOflines so that that obejct will always print same no lines


    StarPattern{
      
      int noOfLines;

      public StarPattern(int linesWanted){
          super();
          this.noOfLines =  linesWanted;

      }

      printPattern(){

        for int(i=0;i< this.noOflines)
      }

    }


====   app class

     StarPattern fiveLinesPattern =  new StarPattern(5);
        fiveLinePattern.printPattern();


StarPattern tenLinesPattern =  new StarPattern(10);
        tenLinePattern.printPattern();

        

4/27/2020::::::::::




        What is a class, Object and reference
                Dog is the class and firstDog, secondDog, thirdDog   are objects
      an object is an instance of a class.
      each object can be accessed by a reference to that object which we call as variable/variabele name

       What is an interface      
      
  String 
         parseInt   --- String "1234"
           throw NumberFormatException
         compareTo  --- ascii number diff  
         equals     --- 

          "One Cloud Java Training" 
           12345678901234567890123  
                   23

  String myString = new String("One Cloud Java Training"); 
         myString = "One Cloud Java Training";

  int lengthOfString = myString.length();   

  char aCharacter = myString.charAt(9);
  System.out.println("The character at 9 position is: "+aCharacter);

          

   String firstString = " One Cloud Java Training ";
   String secondString ="one cloud java training";
   String thirdString = "";

   int differenceOfString = firstString.compareTo(secondString);
   if(differenceOfString==0)
      sysout -- they are equal
   if(diff >0)
     Madhavi Shalini

int differenceOfString = firstString.compareToIgnoreCase(secondString);     

      String combinedString  = firstString.concat(secondString);
              "One Cloud Java Trainingone cloud java training"

      boolean isEqual =  firstString.equalsIgnoreCase(secondString) 
       sysout isEqual  --- true

    false     = firstString.isEmpty();

    replaceAll("i", "t")
    "One Cloud Java Training"
    "One Cloue Java Tratntng"
   
   toUppercase(firstString)
      ONE CLOUD JAVA TRAINING
   toLowercase(first)   

   04-27-2020  ==== exercise
 1. class with private variable 
     but with public getters and setters

 2. Complete the Interface example      
 3. String method practice
       Solution class will have one method
         StringExamples  ----    demoStringMethods()
         StringExamplesApp  ---- call demoMethos


About to demo String compareTo
First String:
Second String: 
compare to result is:
Done demo String compare

About to start String length 
First string:
length of this String :
Done demo String length

About to start String concat
........


public class StringExamples{
  
    String firstString="";
    String secn  = "";
    String third 


    public void demoString(){

       sysout -- about to start 
       int length = this.firststring.lenghth;
       sysout --- length



    }

}





